alias cause S1;
alias VPagenum S2;
alias IP_addr S3;
alias exc S4;

cause = EFR%10;
VPagenum = ( (EFR/10) %100);
IP_addr = (EFR/1000) ;

if(cause == 1) then                   //checking which exception

exc = "Illegal Instruction";
print exc;
inline "JMP 11776";

else

if(cause == 2) then                   //checking exception 2

exc = "Illegal Memory access";
print exc;
inline "JMP 11776";

else

if(cause == 3) then                   //checking exception 3

exc = "Arithmetic exception";
print exc;
inline "JMP 11776";

else

if(cause == 4) then                   //checking exception 4

exc = "Illegal operands";
print exc;
inline "JMP 11776";

else

alias phy_page S5;

phy_page = [PTBR + 2 *VPagenum];

if(phy_page == -1) then               //check if page num is invalid

inline "JMP 11776";

else

alias i S6;
alias newpage S7;

i = MEM_LIST + 25;

while(1) do

if(i==1344) then
break;
endif;

if([i] == 0) then

[i] = 1;
newpage = i-MEM_LIST;

break;

endif;

i=i+1;

endwhile;

if(i == 1344) then                    // check if no page is found

alias newPTBR S8;

newPTBR = PTBR;

while(1) do

if([newPTBR +1] == "01") then                //check if valid with reference bit is 0

if( ((newPTBR + 2)% 8 !=0 ) && ([MEM_LIST +[newPTBR]] == 1) ) then  //check if not stack and shared

newpage = [newPTBR];

alias j S9;

j=448;

while(j < 512) do

if([DISK_LIST + j] == 0) then

[DISK_LIST + j] =1;

store(newpage,j);
store(6,20);
[newPTBR] = j;
[newPTBR + 1]= "00";

endif;

j=j+1;

endwhile;

if(j==512) then                               // check if no space in swap

alias curPID S10;
alias curPCB S11;

curPID = (newPTBR -1024)/8;

curPCB = READY_LIST + 32*curPID;

[curPCB + 1] = 0;

alias k S12;
k=0;

while(k<8) do

alias fileindex S13;
fileindex = [curPCB + 15 + 2*k];

if(fileindex!=-1) then                                //check if file present

[FILE_TABLE + 2*fileindex + 1] = [FILE_TABLE + 2*fileindex + 1] - 1;

if([FILE_TABLE + 2*fileindex + 1] == 0)  then         // checking the open_count is 0

[FILE_TABLE + 2*fileindex + 0] = -1;

endif;                                            // checking the open_count is 0  

[curPCB + 15 + k*2 + 0] = -1;
[curPCB + 15 + k*2 + 1] = -1;

endif;                                           //check if file present

k=k+1;
endwhile;


endif;                                               // check if no space in swap

break;

endif;                                                              //check if not stack and shared

endif;                                       //check if valid with reference bit is 0

if([newPTBR + 1] == "10") then

[newPTBR + 1] = "00";

endif;

if([newPTBR + 1] == "11") then

[newPTBR + 1] = "01";

endif;

newPTBR = newPTBR + 2;

if(newPTBR == 1280) then
newPTBR =1024;
endif;

endwhile;

endif;                                // check if no page is found

if(phy_page > 20 && phy_page < 448) then          //check if page is in disk

load(newpage,phy_page);

endif;                                            //check if page is in disk

if(phy_page >= 448) then          //check if page is in swap

load(newpage,phy_page);

[DISK_LIST + phy_page] = [DISK_LIST + phy_page] - 1;
store(6,20);

endif;                            //check if page is in swap

[PTBR + VPagenum*2] = newpage;
[PTBR + VPagenum*2 +1] = "11";

endif;                                //check if page num is invalid

endif;                                //checking exception 4

endif;                                //checking exception 3 

endif;                                //checking exception 2

endif;                                //checking which exception

SP = SP + 1;

alias physicalSP S14;
physicalSP = ([PTBR + 2 * (SP/512)]* 512) + (SP % 512);

[physicalSP]=IP_addr;

ireturn;
