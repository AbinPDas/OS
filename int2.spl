alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP/512)]* 512) + (SP % 512);
alias sysCallno S1;
alias filename S2;
alias ret S3;
alias currentFat S4;
ret=0;
sysCallno = [physicalSP - 1]; 
filename = [physicalSP - 3];

if(sysCallno == 2) then                            // checking system call no 2
currentFat = FAT;

while (1) do
if(filename == [currentFat + 0]) then
ret =0;
break;
endif;
if(currentFat == 3064) then
ret = -1;
break;
endif;
currentFat = currentFat + 8;
endwhile;

if(ret == 0) then                                 //check if the filename exists (open syscall)
alias index S5;
index = 0 ;

while(1) do
if([FILE_TABLE + 2*index + 0] == currentFat) then
ret = index;
break;
endif;
if([FILE_TABLE + 2*index + 0] == -1) then
ret =0;
break;
endif;
if(FILE_TABLE + 2*index == 1470) then
ret = -1;
break;
endif;
index = index + 1;
endwhile;

if(ret == -1) then                               //check if the file table has space 
[physicalSP - 2] = ret;
else                                             // if the file table has space

if(ret == 0) then                                //checking again if file is open
alias ind S6;
ind = index;

while(1) do
if([FILE_TABLE + 2*ind + 0] == currentFat) then
index = ind;
break;
endif;
if(FILE_TABLE + 2*ind == 1470) then
break;
endif;
ind = ind + 1;
endwhile;

endif;                                        //checking again if file is open

alias currentPID S7;
alias currentPCB S8;
currentPID = (PTBR - 1024)/8;
currentPCB = READY_LIST + currentPID * 32;
ret = 0;

while(1) do
if([currentPCB + 15 + 2*ret] == -1) then
[currentPCB + 15 + 2*ret + 0] = index;
[currentPCB + 15 + 2*ret + 1] = 0;
break;
endif;
if(ret == 7) then
ret = -1;
break;
endif;
ret = ret + 1;
endwhile;

if(ret == -1) then                             //check if the per-process table has space
[physicalSP - 2] = -1;

else                                           //if the per-process table has space
[physicalSP - 2] = ret;
[FILE_TABLE + 2*index + 0] = (currentFat - FAT)/8;
[FILE_TABLE + 2*index + 1] = [FILE_TABLE + 2*index + 1] + 1;

endif;                                          //check if the per-process table has space

endif;                                            //check if the file table has space 

else                                               // if the filename does not exist(open syscall)
[physicalSP - 2] =-1;
endif;                                             //check if the filename exists (open syscall)

endif;                                              // checking system call no 2

if(sysCallno == 3) then                            // checking system call no 3
if(filename <0 || filename >7) then                // checking validity of index
[physicalSP - 2] = -1;

else
alias currentPID S7;
alias currentPCB S8;
currentPID = (PTBR - 1024)/8;
currentPCB = READY_LIST + currentPID * 32;

if([currentPCB + 15 + filename*2 + 0] == -1) then      //checking the descriptor is open/close
[physicalSP - 2] = -1;

else
alias fileindex S9;
fileindex = [currentPCB + 15 + filename*2 +0];
[FILE_TABLE + 2*fileindex + 1] = [FILE_TABLE + 2*fileindex + 1] - 1;

if([FILE_TABLE + 2*fileindex + 1] == 0)  then         // checking the open_count is 0
[FILE_TABLE + 2*fileindex + 0] = -1;
[currentPCB + 15 + filename*2 + 0] = -1;
[currentPCB + 15 + filename*2 + 1] = -1;
[physicalSP - 2] = 0;

endif;                                            // checking the open_count is 0              

endif;                                             //checking the descriptor is open/close

endif;                                             // checking validity of index


endif;                                             // checking system call no 3

ireturn;
